/*
Plateforme web - "QUI SERA THE KING OF THE TABLE ? – QG Lounge 2025"
Stack: React + TailwindCSS
This single-file starter contains:
 - App.jsx (React component) with pages: Home, Register, Bracket, Results, Admin
 - Firebase integration placeholders (Firestore) for realtime storage
 - Simple mobile-money / Wave payment mock flow (hook for real integration)
 - Bracket generation logic for 32 players
 - Responsive, elegant style (red, yellow, black) using Tailwind classes

HOW TO USE
1. Create a React app (Vite or Create React App).
2. Install dependencies:
   npm install react-router-dom firebase
3. Add Tailwind CSS to the project (follow Tailwind docs).
4. Replace the Firebase config placeholders with your project values.
5. Start the app: npm run dev

NOTES ON PAYMENT
- This project uses a MOCK payment flow for testing.
- For production, integrate a mobile money provider (Wave/MTN/Orange) or a payment gateway (Flutterwave).
- Implement server-side endpoints to verify transactions & update Firestore on confirmation.

HOSTING
- Frontend: Vercel / Netlify (recommended)
- Backend (if needed): Render / Railway / Firebase Cloud Functions

ENV VARIABLES (example .env)
REACT_APP_FIREBASE_API_KEY=...
REACT_APP_FIREBASE_AUTH_DOMAIN=...
REACT_APP_FIREBASE_PROJECT_ID=...
REACT_APP_ADMIN_PASSWORD=ton_mot_de_passe_admin

*/

import React, { useEffect, useState } from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter as Router, Routes, Route, Link, useNavigate } from "react-router-dom";

// Firebase (client-side). Replace with your config and enable Firestore.
import firebase from "firebase/compat/app";
import "firebase/compat/firestore";

const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY || "REPLACE_API_KEY",
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN || "REPLACE_AUTH_DOMAIN",
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID || "REPLACE_PROJECT_ID",
};

if (!firebase.apps.length) {
  firebase.initializeApp(firebaseConfig);
}
const db = firebase.firestore();

// Utility: shuffle array
function shuffle(array) {
  let currentIndex = array.length, randomIndex;
  while (currentIndex !== 0) {
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;
    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
  }
  return array;
}

/* --------- App Styles (Tailwind classes used) --------- */
const brand = {
  primary: "bg-red-600",
  accent: "text-yellow-400",
  dark: "bg-black",
};

/* --------- Simple header component --------- */
function Header() {
  return (
    <header className="w-full py-4 px-6 flex items-center justify-between bg-black text-white">
      <div className="flex items-center gap-3">
        <div className="w-10 h-10 rounded-full bg-yellow-400 flex items-center justify-center text-black font-bold">K</div>
        <div>
          <div className="font-bold">QUI SERA THE KING OF TABLE ?</div>
          <div className="text-xs text-gray-300">QG Lounge 2025 • Cagnotte : 1 000 000 FCFA</div>
        </div>
      </div>
      <nav className="flex gap-4 items-center">
        <Link to="/" className="text-sm hover:underline">Accueil</Link>
        <Link to="/inscription" className="text-sm hover:underline">Inscription</Link>
        <Link to="/matches" className="text-sm hover:underline">Matches</Link>
        <Link to="/resultats" className="text-sm hover:underline">Résultats</Link>
        <Link to="/admin" className="text-sm hover:underline">Admin</Link>
      </nav>
    </header>
  );
}

/* --------- Home Page --------- */
function Home() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    // realtime count of participants (collection 'players')
    const unsub = db.collection("players").onSnapshot((snap) => {
      setCount(snap.size);
    });
    return () => unsub();
  }, []);

  return (
    <main className="p-6 min-h-[70vh] bg-gradient-to-b from-black via-red-900 to-black text-white">
      <section className="max-w-4xl mx-auto bg-opacity-60 backdrop-blur-sm rounded-xl p-6 border border-gray-800">
        <h1 className="text-3xl font-bold mb-2">QUI SERA THE KING OF TABLE ?</h1>
        <p className="text-yellow-400 font-semibold mb-4">QG Lounge 2025 — Cagnotte : 1 000 000 FCFA</p>
        <p className="mb-4">Tournoi professionnel digitalisé • 32 participants • Inscription : 25 000 FCFA (Mobile Money / Wave)</p>

        <div className="flex flex-col sm:flex-row gap-4">
          <Link to="/inscription" className="px-6 py-3 rounded-md bg-red-600 text-white font-semibold">S'inscrire (25 000 FCFA)</Link>
          <Link to="/matches" className="px-6 py-3 rounded-md border border-yellow-400 text-yellow-400 font-semibold">Voir le bracket</Link>
        </div>

        <div className="mt-6 p-4 bg-black bg-opacity-40 rounded-md">
          <div className="text-sm">Participants inscrits :</div>
          <div className="text-2xl font-bold">{count} / 32</div>
        </div>
      </section>
    </main>
  );
}

/* --------- Registration Page --------- */
function Inscription() {
  const navigate = useNavigate();
  const [form, setForm] = useState({ nom: "", telephone: "", equipe: "", paiement: "Wave" });
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState(null);

  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });

  // Mock payment flow - replace with real flow in production
  const processPayment = async (amount, method) => {
    // For production: call your backend to create a payment request with Wave/MoMo APIs
    return new Promise((res) => setTimeout(() => res({ success: true, txRef: "MOCKTX123" }), 1200));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage(null);

    // Basic validation
    if (!form.nom || !form.telephone) {
      setMessage({ type: "error", text: "Veuillez remplir le nom et le téléphone." });
      setLoading(false);
      return;
    }

    try {
      const payment = await processPayment(25000, form.paiement);
      if (!payment.success) throw new Error("Paiement échoué");

      // Save player in Firestore
      const doc = await db.collection("players").add({
        nom: form.nom,
        telephone: form.telephone,
        equipe: form.equipe || null,
        paiementMethod: form.paiement,
        paymentRef: payment.txRef,
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
      });

      // Generate code joueur
      const code = `KING-${doc.id.slice(0, 6).toUpperCase()}`;
      await db.collection("players").doc(doc.id).update({ code });

      setMessage({ type: "success", text: `Inscription confirmée. Code joueur : ${code}` });
      setForm({ nom: "", telephone: "", equipe: "", paiement: "Wave" });
      // If reached 32 participants, optionally generate bracket

      navigate("/inscription/merci", { state: { code } });
    } catch (err) {
      setMessage({ type: "error", text: err.message || "Une erreur est survenue." });
    }
    setLoading(false);
  };

  return (
    <main className="p-6 min-h-[70vh] bg-black text-white">
      <section className="max-w-2xl mx-auto bg-red-900/20 p-6 rounded-lg border border-gray-800">
        <h2 className="text-2xl font-bold mb-2">Inscris-toi maintenant et deviens le Roi de la Table !</h2>
        <p className="text-sm mb-4">Frais d'inscription : <span className="font-bold">25 000 FCFA</span> — Paiement par Wave / Mobile Money</p>

        <form onSubmit={handleSubmit} className="flex flex-col gap-3">
          <input name="nom" value={form.nom} onChange={handleChange} placeholder="Nom et prénom" className="p-3 rounded bg-black/50 border border-gray-700" />
          <input name="telephone" value={form.telephone} onChange={handleChange} placeholder="Téléphone / WhatsApp" className="p-3 rounded bg-black/50 border border-gray-700" />
          <input name="equipe" value={form.equipe} onChange={handleChange} placeholder="Nom d'équipe (facultatif)" className="p-3 rounded bg-black/50 border border-gray-700" />

          <label className="text-sm">Mode de paiement</label>
          <select name="paiement" value={form.paiement} onChange={handleChange} className="p-3 rounded bg-black/50 border border-gray-700">
            <option>Wave</option>
            <option>Mobile Money</option>
            <option>Autre</option>
          </select>

          <button disabled={loading} className="mt-3 bg-yellow-400 text-black font-bold py-3 rounded">{loading ? "Traitement..." : "VALIDER MON INSCRIPTION"}</button>
        </form>

        {message && (
          <div className={`mt-4 p-3 rounded ${message.type === "error" ? "bg-red-700" : "bg-green-700"}`}>{message.text}</div>
        )}

        <p className="mt-4 text-xs text-gray-300">Vous recevrez une confirmation via WhatsApp après validation du paiement.</p>
      </section>
    </main>
  );
}

/* --------- Matches / Bracket Page --------- */
function Matches() {
  const [bracket, setBracket] = useState(null);
  const [players, setPlayers] = useState([]);

  useEffect(() => {
    // fetch players
    const unsub = db.collection("players").orderBy("createdAt").onSnapshot((snap) => {
      const list = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      setPlayers(list);
    });
    return () => unsub();
  }, []);

  useEffect(() => {
    // fetch bracket (if exists)
    const unsub = db.collection("meta").doc("bracket").onSnapshot((doc) => {
      setBracket(doc.exists ? doc.data() : null);
    });
    return () => unsub();
  }, []);

  const generateBracket = async () => {
    if (players.length < 2) return alert("Pas assez de joueurs pour générer le bracket.");
    if (players.length !== 32) {
      if (!window.confirm(`Il y a ${players.length} inscrits. Continuer ? (le bracket est configuré pour 32).`)) return;
    }

    // Shuffle and pair
    const shuffled = shuffle(players.slice());
    const pairs = [];
    for (let i = 0; i < shuffled.length; i += 2) {
      pairs.push({ p1: shuffled[i], p2: shuffled[i + 1] || null, result: null });
    }
    const data = { round: 1, pairs, createdAt: firebase.firestore.FieldValue.serverTimestamp() };
    await db.collection("meta").doc("bracket").set(data);
    alert("Bracket généré et sauvegardé.");
  };

  return (
    <main className="p-6 min-h-[70vh] bg-gray-900 text-white">
      <section className="max-w-5xl mx-auto bg-black/60 p-6 rounded-lg">
        <h2 className="text-2xl font-bold mb-4">Bracket & Tirage au sort</h2>
        <div className="mb-4">
          <button onClick={generateBracket} className="px-4 py-2 bg-red-600 rounded">Générer le tirage au sort</button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="p-4 bg-black/40 rounded">
            <h3 className="font-semibold">Joueurs inscrits ({players.length})</h3>
            <ul className="mt-2 text-sm space-y-1">
              {players.map((p) => (
                <li key={p.id} className="flex justify-between">
                  <span>{p.nom} ({p.code || '-'})</span>
                  <span className="text-gray-400">{p.paiementMethod}</span>
                </li>
              ))}
            </ul>
          </div>

          <div className="p-4 bg-black/40 rounded">
            <h3 className="font-semibold">Bracket (aperçu)</h3>
            {bracket ? (
              <div className="mt-3">
                <div className="text-sm mb-2">Round {bracket.round}</div>
                <ul className="space-y-2">
                  {bracket.pairs.map((pair, idx) => (
                    <li key={idx} className="p-2 bg-gray-800/60 rounded flex justify-between items-center">
                      <div>
                        <div className="font-medium">{pair.p1 ? pair.p1.nom : 'TBD'}</div>
                        <div className="text-xs text-gray-400">vs</div>
                        <div className="font-medium">{pair.p2 ? pair.p2.nom : 'TBD'}</div>
                      </div>
                      <div className="text-sm">{pair.result ? `${pair.result.winner.nom} vainqueur` : 'En attente'}</div>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <div className="text-sm text-gray-400">Aucun bracket généré pour l'instant.</div>
            )}
          </div>
        </div>
      </section>
    </main>
  );
}

/* --------- Results Page --------- */
function Resultats() {
  const [bracket, setBracket] = useState(null);

  useEffect(() => {
    const unsub = db.collection("meta").doc("bracket").onSnapshot((doc) => {
      setBracket(doc.exists ? doc.data() : null);
    });
    return () => unsub();
  }, []);

  if (!bracket) return (
    <main className="p-6 min-h-[70vh] bg-black text-white">
      <section className="max-w-3xl mx-auto bg-black/60 p-6 rounded">
        <h2 className="text-2xl font-bold mb-2">Résultats</h2>
        <p className="text-sm text-gray-300">Aucun match enregistré pour l'instant.</p>
      </section>
    </main>
  );

  return (
    <main className="p-6 min-h-[70vh] bg-black text-white">
      <section className="max-w-4xl mx-auto bg-black/60 p-6 rounded">
        <h2 className="text-2xl font-bold mb-4">Tableau des résultats</h2>
        <ul className="space-y-3">
          {bracket.pairs.map((pair, idx) => (
            <li key={idx} className="p-3 bg-gray-900/50 rounded flex justify-between items-center">
              <div>
                <div className="font-medium">{pair.p1 ? pair.p1.nom : 'TBD'}</div>
                <div className="text-xs text-gray-400">vs</div>
                <div className="font-medium">{pair.p2 ? pair.p2.nom : 'TBD'}</div>
              </div>
              <div className="text-sm text-yellow-400">{pair.result ? `${pair.result.winner.nom} (Score: ${pair.result.score})` : 'En attente'}</div>
            </li>
          ))}
        </ul>
      </section>
    </main>
  );
}

/* --------- Admin Page --------- */
function Admin() {
  const [password, setPassword] = useState("");
  const [authed, setAuthed] = useState(false);
  const [bracket, setBracket] = useState(null);

  useEffect(() => {
    const unsub = db.collection("meta").doc("bracket").onSnapshot((doc) => {
      setBracket(doc.exists ? { id: doc.id, ...doc.data() } : null);
    });
    return () => unsub();
  }, []);

  const checkPass = () => {
    const env = process.env.REACT_APP_ADMIN_PASSWORD || "admin123";
    if (password === env) setAuthed(true);
    else alert("Mot de passe incorrect");
  };

  const setResult = async (idx) => {
    const winnerName = prompt("Nom du gagnant (exact) :");
    const score = prompt("Score (ex: 8-6) :");
    if (!winnerName) return;
    const pairs = [...bracket.pairs];
    const pair = pairs[idx];
    const winner = pair.p1 && pair.p1.nom === winnerName ? pair.p1 : pair.p2 && pair.p2.nom === winnerName ? pair.p2 : null;
    if (!winner) return alert("Nom non reconnu dans ce match.");
    pair.result = { winner, score };
    // Save
    await db.collection("meta").doc("bracket").update({ pairs });
    alert("Résultat enregistré.");
  };

  if (!authed) return (
    <main className="p-6 min-h-[70vh] bg-black text-white">
      <section className="max-w-md mx-auto bg-black/60 p-6 rounded">
        <h2 className="text-2xl font-bold mb-2">Espace Admin</h2>
        <p className="text-sm mb-4">Entrez le mot de passe administrateur pour accéder au tableau de bord.</p>
        <input value={password} onChange={(e) => setPassword(e.target.value)} className="p-3 rounded bg-black/50 border border-gray-700 w-full mb-3" placeholder="Mot de passe" />
        <button onClick={checkPass} className="w-full bg-yellow-400 text-black font-bold py-3 rounded">Accéder</button>
      </section>
    </main>
  );

  return (
    <main className="p-6 min-h-[70vh] bg-black text-white">
      <section className="max-w-5xl mx-auto bg-black/60 p-6 rounded">
        <h2 className="text-2xl font-bold mb-4">Tableau de bord organisateur</h2>
        {bracket ? (
          <div>
            <div className="mb-3">Round: {bracket.round}</div>
            <ul className="space-y-2">
              {bracket.pairs.map((pair, idx) => (
                <li key={idx} className="p-3 bg-gray-900/40 rounded flex justify-between items-center">
                  <div>
                    <div className="font-medium">{pair.p1 ? pair.p1.nom : 'TBD'}</div>
                    <div className="text-xs text-gray-400">vs</div>
                    <div className="font-medium">{pair.p2 ? pair.p2.nom : 'TBD'}</div>
                  </div>
                  <div className="flex gap-2">
                    <button onClick={() => setResult(idx)} className="px-3 py-1 rounded bg-red-600">Enregistrer résultat</button>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        ) : (
          <div>Aucun bracket pour l'instant.</div>
        )}
      </section>
    </main>
  );
}

/* --------- App Router --------- */
function App() {
  return (
    <Router>
      <div className="min-h-screen bg-black text-white font-sans">
        <Header />
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/inscription" element={<Inscription />} />
          <Route path="/inscription/merci" element={<Merci />} />
          <Route path="/matches" element={<Matches />} />
          <Route path="/resultats" element={<Resultats />} />
          <Route path="/admin" element={<Admin />} />
        </Routes>
      </div>
    </Router>
  );
}

function Merci() {
  return (
    <main className="p-6 min-h-[70vh] bg-black text-white">
      <section className="max-w-md mx-auto bg-yellow-400/10 p-6 rounded border border-gray-700">
        <h2 className="text-2xl font-bold mb-2">Merci pour votre inscription !</h2>
        <p className="text-sm">Vous recevrez la confirmation et les détails de votre match par WhatsApp.</p>
        <Link to="/" className="mt-4 inline-block text-yellow-400">Retour à l'accueil</Link>
      </section>
    </main>
  );
}

/* --------- Render --------- */
const container = document.getElementById("root");
if (container) {
  createRoot(container).render(<App />);
}

export default App;
